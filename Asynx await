
function fetchData(url) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (url) {
                resolve(`Data from ${url}`);
            } else {
                reject('No URL provided');
            }
            }, 1000);
    });
};

async function fetchAndLogData(url) {
    try {
        const data = await fetchData(url);
        console.log(data);
    } catch (error) {
        console.error(error);
    }
}
fetchAndLogData('https://api.example.com/data');

//This code defines a `fetchData` function that returns a promise that resolves with a string after a
 const addtion = async (a, b) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (typeof a === 'number' && typeof b === 'number') {
                resolve(a + b);
            } else {
                reject('Both arguments must be numbers');
            }
        }, 1000);
    });
 }
 async function calculateAndLogSum(a, b) {
    try {
        const sum = await addtion(a, b);
        console.log(`Sum: ${sum}`);
    } catch (error) {
        console.error(error);
    }
}
calculateAndLogSum(5, 10); delay. The //`fetchAndLogData` function uses `async/await` to handle the promise returned by `fetchData`, logging the result or catching any errors that occur. The `addtion` function is also defined to return a promise that resolves with the sum of two numbers after a delay, and the `calculateAndLogSum` function uses `async/await` to log the sum or catch errors.
